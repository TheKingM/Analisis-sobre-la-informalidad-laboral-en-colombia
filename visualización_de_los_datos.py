# -*- coding: utf-8 -*-
"""Visualización de los datos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10iqER9PDNQ4r-d0d-c4SGH001-TbIKCs
"""

!pip install dash plotly

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import plotly.express as px

np.random.seed(10)
datos = pd.DataFrame({
    'Sector': ['Agricultura', 'Servicios', 'Industria', 'Construcción', 'Finanzas'],
    'Empleo_Informal': np.random.randint(20, 80, size=5),
    'Ingresos': np.random.uniform(500, 1500, size=5),
    'Educación': ['Primaria', 'Secundaria', 'Técnica', 'Universitaria', 'Postgrado'],
    'Acceso_Social': np.random.choice([True, False], size=5),
    'Edad': np.random.randint(18, 65, size=5),
    'Horas_Trabajadas': np.random.randint(20, 60, size=5),
    'Región': ['Norte', 'Sur', 'Este', 'Oeste', 'Centro']
})

app = dash.Dash(__name__)

opciones_graficos = [
    {'label': 'Tasa de Empleo Informal por Sector', 'value': 'grafico_barras'},
    {'label': 'Ingresos Promedio por Sector', 'value': 'grafico_lineas'},
    {'label': 'Nivel Educativo de los Trabajadores Informales', 'value': 'grafico_pastel'},
    {'label': 'Acceso a Seguridad Social por Sector', 'value': 'grafico_barras_apiladas'},
    {'label': 'Distribución de Edad de los Trabajadores Informales', 'value': 'grafico_histograma'},
    {'label': 'Horas Trabajadas por Sector', 'value': 'grafico_boxplot'},
    {'label': 'Tasa de Informalidad por Región', 'value': 'grafico_barras_horizontal'},
    {'label': 'Relación entre Ingresos y Empleo Informal', 'value': 'grafico_dispersion_tamaño'},
    {'label': 'Horas Trabajadas vs Ingresos por Sector', 'value': 'grafico_dispersion_categorias'},
    {'label': 'Distribución de Ingresos por Sector', 'value': 'grafico_violin'},
    {'label': 'Matriz de Dispersión de Variables', 'value': 'scatter_matrix'},
    {'label': 'Mapa de Calor de Correlaciones', 'value': 'heatmap_correlation'}
]

app.layout = html.Div([
    html.H1("Propuesta de Análisis de la Informalidad Laboral en Colombia"),
    html.H2("grupo EDA"),
    dcc.Dropdown(
        id='selector_grafico',
        options=opciones_graficos,
        value='grafico_barras'
    ),
    dcc.Graph(id='grafico_seleccionado')
])

@app.callback(
    Output('grafico_seleccionado', 'figure'),
    Input('selector_grafico', 'value')
)
def actualizar_grafico(grafico_seleccionado):
    fig = crear_graficos()[opciones_graficos.index(next(item for item in opciones_graficos if item['value'] == grafico_seleccionado))]
    return fig

def crear_graficos():
    graficos = []

    grafico_barras = go.Figure([go.Bar(x=datos['Sector'], y=datos['Empleo_Informal'])])
    grafico_barras.update_layout(title='Tasa de Empleo Informal por Sector', xaxis_title='Sector', yaxis_title='Porcentaje de Informalidad')
    graficos.append(grafico_barras)

    grafico_lineas = go.Figure([go.Scatter(x=datos['Sector'], y=datos['Ingresos'], mode='lines+markers')])
    grafico_lineas.update_layout(title='Ingresos Promedio por Sector', xaxis_title='Sector', yaxis_title='Ingresos Promedio ($)')
    graficos.append(grafico_lineas)

    grafico_pastel = go.Figure([go.Pie(labels=datos['Educación'], values=datos['Empleo_Informal'])])
    grafico_pastel.update_layout(title='Nivel Educativo de los Trabajadores Informales')
    graficos.append(grafico_pastel)

    grafico_apiladas = go.Figure(data=[
        go.Bar(name='Con Acceso', x=datos['Sector'], y=[1 if x else 0 for x in datos['Acceso_Social']]),
        go.Bar(name='Sin Acceso', x=datos['Sector'], y=[0 if x else 1 for x in datos['Acceso_Social']])
    ])
    grafico_apiladas.update_layout(title='Acceso a Seguridad Social por Sector', xaxis_title='Sector', yaxis_title='Cantidad de Trabajadores', barmode='stack')
    graficos.append(grafico_apiladas)

    grafico_histograma = go.Figure([go.Histogram(x=datos['Edad'])])
    grafico_histograma.update_layout(title='Distribución de Edad de los Trabajadores Informales', xaxis_title='Edad', yaxis_title='Cantidad')
    graficos.append(grafico_histograma)

    grafico_boxplot = go.Figure([go.Box(y=datos['Horas_Trabajadas'], x=datos['Sector'])])
    grafico_boxplot.update_layout(title='Horas Trabajadas por Sector', xaxis_title='Sector', yaxis_title='Horas Trabajadas')
    graficos.append(grafico_boxplot)

    grafico_barras_horizontal = go.Figure([go.Bar(x=datos['Empleo_Informal'], y=datos['Región'], orientation='h')])
    grafico_barras_horizontal.update_layout(title='Tasa de Informalidad por Región', xaxis_title='Porcentaje de Informalidad', yaxis_title='Región')
    graficos.append(grafico_barras_horizontal)

    grafico_dispersion_tamaño = go.Figure(data=[go.Scatter(
        x=datos['Ingresos'],
        y=datos['Empleo_Informal'],
        mode='markers',
        marker=dict(
            size=datos['Horas_Trabajadas'],
            color=datos['Horas_Trabajadas'],
            showscale=True
        ),
        text=datos['Sector']
    )])
    grafico_dispersion_tamaño.update_layout(
        title='Relación entre Ingresos y Empleo Informal con Horas Trabajadas como Tamaño del Marcador',
        xaxis_title='Ingresos',
        yaxis_title='Empleo Informal'
    )
    graficos.append(grafico_dispersion_tamaño)

    grafico_dispersion_categorias = go.Figure()
    for sector in datos['Sector'].unique():
        sector_data = datos[datos['Sector'] == sector]
        grafico_dispersion_categorias.add_trace(go.Scatter(x=sector_data['Horas_Trabajadas'], y=sector_data['Ingresos'], mode='markers', name=sector))
    grafico_dispersion_categorias.update_layout(title='Horas Trabajadas vs Ingresos por Sector', xaxis_title='Horas Trabajadas', yaxis_title='Ingresos')
    graficos.append(grafico_dispersion_categorias)

    grafico_violin = go.Figure()
    for sector in datos['Sector'].unique():
        sector_data = datos[datos['Sector'] == sector]
        grafico_violin.add_trace(go.Violin(y=sector_data['Ingresos'], name=sector))
    grafico_violin.update_layout(title='Distribución de Ingresos por Sector')
    graficos.append(grafico_violin)

    scatter_matrix = px.scatter_matrix(datos, dimensions=['Empleo_Informal', 'Ingresos', 'Edad', 'Horas_Trabajadas'], color='Sector')
    scatter_matrix.update_layout(title='Matriz de Dispersión de Variables')
    graficos.append(scatter_matrix)

    heatmap_correlation = go.Figure(go.Heatmap(
        z=datos[['Empleo_Informal', 'Ingresos', 'Edad', 'Horas_Trabajadas']].corr(),
        x=['Empleo_Informal', 'Ingresos', 'Edad', 'Horas_Trabajadas'],
        y=['Empleo_Informal', 'Ingresos', 'Edad', 'Horas_Trabajadas']))
    heatmap_correlation.update_layout(title='Mapa de Calor de Correlaciones')
    graficos.append(heatmap_correlation)

    return graficos

if __name__ == '__main__':
    app.run_server(debug=True, port=8050)